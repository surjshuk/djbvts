// src/lib/report-pdf.ts
import QRCode from "qrcode";

type Row = {
  area: string;
  vehicleNo: string;
  tankerType: string;
  transporterName: string;
  tripDistanceKm: string;
  engineHours: string;
  tripCount: number;
};

function fmtDate(d: Date) {
  const dd = String(d.getDate()).padStart(2, "0");
  const mm = String(d.getMonth() + 1).padStart(2, "0");
  const yy = d.getFullYear();
  return `${dd}-${mm}-${yy}`;
}

export async function buildReportPdf(opts: {
  title: string;
  dateFrom: Date;
  dateTo: Date;
  generatedAt: Date;
  generatedByEmail: string;
  rows: Row[];
  verificationUrl: string;
}): Promise<Buffer> {
  // ← lazy import so Turbopack doesn’t try to bundle its assets
  const { default: PDFDocument } = await import("pdfkit");

  const doc = new PDFDocument({ size: "A4", margin: 36 });
  const chunks: Buffer[] = [];
  doc.on("data", (c) => chunks.push(c));
  const done = new Promise<Buffer>((resolve) => doc.on("end", () => resolve(Buffer.concat(chunks))));

  // header
  doc.fontSize(16).text(opts.title, { align: "center" }).moveDown(0.2);
  doc.fontSize(10).text(`(From: ${fmtDate(opts.dateFrom)}  To: ${fmtDate(opts.dateTo)})`, { align: "center" }).moveDown();
  doc.fontSize(10).text(
    `System Generated Report, Generated at: ${fmtDate(opts.generatedAt)} ${opts.generatedAt.toTimeString().slice(0,5)}`,
    { align: "center" }
  ).moveDown();

  // table
  const cols = [
    { label: "S.No", width: 40 },
    { label: "Area", width: 90 },
    { label: "Vehicle No.", width: 90 },
    { label: "Tanker Type", width: 90 },
    { label: "Transporter Name", width: 120 },
    { label: "Report Date", width: 90 },
    { label: "Trip Distance / Engine Hr", width: 120 },
    { label: "Trip Count", width: 70 },
  ];

  let x = 36;
  let y = doc.y + 10;
  doc.fontSize(9);
  cols.forEach((c) => { doc.text(c.label, x, y, { width: c.width }); x += c.width; });
  y += 22;
  doc.moveTo(36, y).lineTo(559, y).strokeColor("#999").stroke();
  y += 6;

  opts.rows.forEach((r, i) => {
    x = 36;
    const cells = [
      String(i + 1),
      r.area,
      r.vehicleNo,
      r.tankerType,
      r.transporterName,
      fmtDate(opts.dateFrom),
      `${r.tripDistanceKm} km / ${r.engineHours} hr`,
      String(r.tripCount),
    ];
    cells.forEach((val, idx) => { doc.text(val, x, y, { width: cols[idx].width }); x += cols[idx].width; });
    y += 16;
  });

  // QR footer
  const qrDataUrl = await QRCode.toDataURL(opts.verificationUrl);
  const qrBuf = Buffer.from(qrDataUrl.split(",")[1], "base64");
  const footerY = 760;
  doc.image(qrBuf, 36, footerY - 80, { width: 70 });
  doc.fontSize(9).text(
    `Generated by :- ${opts.generatedByEmail} , Report Generated At :- ${fmtDate(opts.generatedAt)} ${opts.generatedAt.toTimeString().slice(0,5)}`,
    120, footerY - 50
  );

  doc.end();
  return done;
}
